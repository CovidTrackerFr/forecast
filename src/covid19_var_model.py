# -*- coding: utf-8 -*-
"""covid19_var_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HgtWVKtoJE5WlJKtliyW12SC5uYqOF4l
"""

# Import libraries
import kaleido
from statsmodels.tsa.statespace.varmax import VARMAX
from plot import plot_and_export
from data import import_and_prepare_data
import statsmodels.api as sm

df_dlog_lastweek, df_dlog, df_dlog_all, df = import_and_prepare_data()

### Model definition

# With booster shots, data until previous week
model_booster_lastweek = VARMAX(df_dlog_lastweek[["new_cases", "hosp", "rea", "incid_dc"]],
                                exog=df_dlog_lastweek[["vaccination_rappel"]], 
                                order=(14, 0),)

# Without any exog variable, data until previous week
model_sans_exo_lastweek = VARMAX(df_dlog_lastweek[["new_cases", "incid_hosp", "incid_rea", "incid_dc"]],
                                 order=(14, 0),)

# With booster shots, full data
model_booster = VARMAX(df_dlog[["new_cases", "hosp", "rea", "incid_dc"]],
                       exog=df_dlog[["vaccination_rappel"]], 
                       order=(14, 0))

# With booster shots, full data
model_sans_exo = VARMAX(df_dlog[["new_cases", "incid_hosp", "incid_rea", "incid_dc"]],
                        order=(14, 0), initialization='approximate_diffuse')


# Fit
model_booster_lastweek_fit = model_booster_lastweek.fit(disp=False)
model_booster_fit = model_booster.fit(disp=False, ) #method="powell"
#model_sans_exo_fit = model_sans_exo.fit(disp=False)

#model_booster_fit.save("output/model_booster_fit")
#model_booster_fit = sm.load("output/model_booster_fit")

# Forecast
def forecast_and_plot():
    steps = 14
    exog_booster=[[df_dlog["vaccination_rappel"].tolist()[-1]]]*steps
    
    for (model_fit, exog, name_plot, delai_dernier_jour) in [\
                                            (model_booster_lastweek_fit, exog_booster, "model_booster_lastweek_fit", 7),\
                                            #(model_sans_exo_lastweek_fit, None, "model_sans_exo_lastweek_fit"),\
                                            (model_booster_fit, exog_booster, "model_booster_fit", 0),\
                                            #(model_sans_exo_fit, None, "model_sans_exo_fit"),\
                                        ]:
    
        yhat = model_fit.get_forecast(steps=steps, exog=exog)
        yhat_mean = yhat.predicted_mean

        # Confidence intervals
        yhat_conf_int_0, yhat_conf_int_1, yhat_conf_int_2, yhat_conf_int_3  = yhat.summary_frame(endog=0, alpha=0.02), yhat.summary_frame(endog=1, alpha=0.02), yhat.summary_frame(endog=2, alpha=0.02), yhat.summary_frame(endog=3, alpha=0.02)
        yhat_conf_int_75_0, yhat_conf_int_75_1, yhat_conf_int_75_2, yhat_conf_int_75_3 = yhat.summary_frame(endog=0, alpha=0.25), yhat.summary_frame(endog=1, alpha=0.25), yhat.summary_frame(endog=2, alpha=0.25), yhat.summary_frame(endog=3, alpha=0.25)

        # Plot
        plot_and_export(df=df, df_dlog_all=df_dlog_all, yhat_mean=yhat_mean, yhat_conf_int_0=yhat_conf_int_0, yhat_conf_int_1=yhat_conf_int_1, yhat_conf_int_2=yhat_conf_int_2, yhat_conf_int_3=yhat_conf_int_3, yhat_conf_int_75_0=yhat_conf_int_75_0, yhat_conf_int_75_1=yhat_conf_int_75_1, yhat_conf_int_75_2=yhat_conf_int_75_2, yhat_conf_int_75_3=yhat_conf_int_75_3, name_fig=name_plot, delai_dernier_jour=delai_dernier_jour)

forecast_and_plot()