# -*- coding: utf-8 -*-
"""covid19_var_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HgtWVKtoJE5WlJKtliyW12SC5uYqOF4l
"""

# Import libraries
import kaleido
from statsmodels.tsa.statespace.varmax import VARMAX
from random import random
import pandas as pd
import numpy as np
from plotly.subplots import make_subplots
from plotly import graph_objects as go
import plotly
import os
PATH = os.getcwd() + "/output/"

# Import new cases data
df_new_cases = pd.read_csv("https://www.data.gouv.fr/fr/datasets/r/dd0de5d9-b5a5-4503-930a-7b08dc0adc7c", sep=";")
df_new_cases.index = pd.to_datetime(df_new_cases["jour"])
df_new_cases = df_new_cases[df_new_cases["cl_age90"]==0]
df_new_cases = df_new_cases[["P"]].rename({"P": "new_cases"}, axis=1)

# Import hospital, ICU admissions and deaths data
df_admissions = pd.read_csv("https://www.data.gouv.fr/fr/datasets/r/6fadff46-9efd-4c53-942a-54aca783c30c", sep=";")
df_admissions = df_admissions.groupby("jour").sum().reset_index()
df_admissions.index = pd.to_datetime(df_admissions["jour"])
df_admissions = df_admissions[["incid_hosp", "incid_rea", "incid_dc"]]

# Import data vaccination
df_vaccination = pd.read_csv("https://www.data.gouv.fr/fr/datasets/r/fa4ad329-14ec-4394-85a4-c5df33769dff", sep=";")
df_vaccination.index = pd.to_datetime(df_vaccination["jour"])
df_vaccination["vaccination"] = (df_vaccination["n_cum_dose1"].rolling(window=7).mean().shift(14))
df_vaccination["vaccination_rappel"] = (df_vaccination["n_cum_rappel"].rolling(window=7).mean().shift(14))
df_vaccination = df_vaccination[["vaccination", "vaccination_rappel"]].fillna(0)

# Data merge
df_dlog = df_new_cases.merge(df_admissions, left_on="jour", right_on="jour")
df_dlog = df_dlog.merge(df_vaccination, left_on="jour", right_on="jour").fillna(0)
df_dlog[df_dlog.columns] = df_dlog[df_dlog.columns].rolling(window=7).mean()

# dlog compute
df_dlog = np.log10(df_dlog)
df_dlog.replace([np.inf, -np.inf], 0, inplace=True)
df_dlog = df_dlog.dropna()
df_dlog_all = df_dlog.copy()
df_dlog = df_dlog["2020-09-01":]

df_dlog_lastweek = df_dlog[:-7]

### Model definition

# With booster shots, data until previous week
model_booster_lastweek = VARMAX(df_dlog_lastweek[["new_cases", "incid_hosp", "incid_rea", "incid_dc"]],
                                exog=df_dlog_lastweek[["vaccination_rappel"]], 
                                order=(14, 0),
                                initialization='approximate_diffuse')

# Without any exog variable, data until previous week
model_sans_exo_lastweek = VARMAX(df_dlog_lastweek[["new_cases", "incid_hosp", "incid_rea", "incid_dc"]],
                                 order=(14, 0),
                                 initialization='approximate_diffuse')

# With booster shots, full data
model_booster = VARMAX(df_dlog[["new_cases", "incid_hosp", "incid_rea", "incid_dc"]],
                       exog=df_dlog[["vaccination_rappel"]], 
                       order=(14, 0),
                       initialization='approximate_diffuse')

# With booster shots, full data
model_sans_exo = VARMAX(df_dlog[["new_cases", "incid_hosp", "incid_rea", "incid_dc"]],
                        order=(14, 0),
                        initialization='approximate_diffuse')


model_booster_lastweek_fit = model_booster_lastweek.fit(disp=False)
model_sans_exo_lastweek_fit = model_sans_exo_lastweek.fit(disp=False)
model_booster_fit = model_booster.fit(disp=False)
model_sans_exo_fit = model_sans_exo.fit(disp=False)

# Forecast
model_fit = model_booster_lastweek_fit
steps = 14
exog=[[df_dlog["vaccination_rappel"].tolist()[-1]]]*steps
yhat = model_fit.get_forecast(steps=steps, exog=exog)
yhat_mean = yhat.predicted_mean

# Confidence intervals
yhat_conf_int_0, yhat_conf_int_1, yhat_conf_int_2, yhat_conf_int_3 = yhat.summary_frame(endog=0, alpha=0.02), yhat.summary_frame(endog=1, alpha=0.02), yhat.summary_frame(endog=2, alpha=0.02), yhat.summary_frame(endog=3, alpha=0.02)
yhat_conf_int_75_0, yhat_conf_int_75_1, yhat_conf_int_75_2, yhat_conf_int_75_3 = yhat.summary_frame(endog=0, alpha=0.25), yhat.summary_frame(endog=1, alpha=0.25), yhat.summary_frame(endog=2, alpha=0.25), yhat.summary_frame(endog=3, alpha=0.25)

# Plot
def plot_and_export():
    fig = make_subplots(rows=4, 
                        cols=1, 
                        vertical_spacing = 0.1,
                        subplot_titles=("<b>New cases</b>", "<b>Hospital admissions</b>", "<b>Intensive Care Unit admissions</b>", "<b>Deaths</b>"))


    fig.add_trace(
        go.Scatter(
            x=yhat_conf_int_75_0.index,
            y=10**yhat_conf_int_75_0["mean_ci_lower"],
            line_width=0,
            mode="lines",
            name="New cases [predicted]",
            showlegend=False
        ),
        row=1,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=yhat_conf_int_75_0.index,
            y=10**yhat_conf_int_75_0["mean_ci_upper"],
            line_width=0,
            fill="tonexty",
            fillcolor="rgba(107, 192, 250, 0.8)",
            mode="lines",
            name="New cases [predicted]",
            showlegend=False
        ),
        row=1,
        col=1
    )


    fig.add_trace(
        go.Scatter(
            x=yhat_conf_int_0.index,
            y=10**yhat_conf_int_0["mean_ci_lower"],
            line_width=0,
            mode="lines",
            name="New cases [predicted]",
            showlegend=False
        ),
        row=1,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=yhat_conf_int_0.index,
            y=10**yhat_conf_int_0["mean_ci_upper"],
            line_width=0,
            fill="tonexty",
            fillcolor="rgba(107, 192, 250, 0.4)",
            mode="lines",
            name="New cases [predicted]",
            showlegend=False
        ),
        row=1,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=yhat_mean.index,
            y=10**yhat_mean["new_cases"],
            mode="lines",
            marker=dict(color="rgba(40, 157, 237, 1)"),
            line=dict(dash='dot'),
            name="New cases [predicted]",
            showlegend=False
        ),
        row=1,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=df_dlog_all.index,
            y=10**df_dlog_all["new_cases"],
            marker_color="black",
            mode="lines",
            name="New cases",
            showlegend=False
        ),
        row=1,
        col=1
    )

    ###
    #Hosp

    fig.add_trace(
        go.Scatter(
            x=yhat_conf_int_75_1.index,
            y=10**yhat_conf_int_75_1["mean_ci_lower"],
            line_width=0,
            mode="lines",
            name="New cases [predicted]",
            showlegend=False
        ),
        row=2,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=yhat_conf_int_75_1.index,
            y=10**yhat_conf_int_75_1["mean_ci_upper"],
            line_width=0,
            fill="tonexty",
            fillcolor="rgba(107, 192, 250, 0.8)",
            mode="lines",
            name="Hospital admissions [predicted]",
            showlegend=False
        ),
        row=2,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=yhat_conf_int_1.index,
            y=10**yhat_conf_int_1["mean_ci_lower"],
            marker_color="blue",
            line_width=0,
            mode="lines",
            name="New cases [predicted]",
            showlegend=False
        ),
        row=2,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=yhat_conf_int_1.index,
            y=10**yhat_conf_int_1["mean_ci_upper"],
            marker_color="blue",
            line_width=0,
            fill="tonexty",
            fillcolor="rgba(107, 192, 250, 0.4)",
            mode="lines",
            name="Hospital admissions [predicted]",
            showlegend=False
        ),
        row=2,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=yhat_mean.index,
            y=10**yhat_mean["incid_hosp"],
            mode="lines",
            marker=dict(color="rgba(40, 157, 237, 1)"),
            line=dict(dash='dot'),
            name="Hospital admissions [predicted]",
            showlegend=False
        ),
        row=2,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=df_dlog_all.index,
            y=10**df_dlog_all["incid_hosp"],
            marker_color="black",
            mode="lines",
            name="Hospital admissions",
            showlegend=False
        ),
        row=2,
        col=1
    )

    ###
    # Rea

    fig.add_trace(
        go.Scatter(
            x=yhat_conf_int_75_2.index,
            y=10**yhat_conf_int_75_2["mean_ci_lower"],
            line_width=0,
            mode="lines",
            name="ICU admissions [predicted]",
            showlegend=False
        ),
        row=3,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=yhat_conf_int_75_2.index,
            y=10**yhat_conf_int_75_2["mean_ci_upper"],
            line_width=0,
            fill="tonexty",
            fillcolor="rgba(107, 192, 250, 0.8)",
            mode="lines",
            name="ICU admissions [predicted]",
            showlegend=False
        ),
        row=3,
        col=1
    )


    fig.add_trace(
        go.Scatter(
            x=yhat_conf_int_2.index,
            y=10**yhat_conf_int_2["mean_ci_lower"],
            line_width=0,
            mode="lines",
            name="ICU admissions [predicted]",
            showlegend=False
        ),
        row=3,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=yhat_conf_int_2.index,
            y=10**yhat_conf_int_2["mean_ci_upper"],
            line_width=0,
            fill="tonexty",
            fillcolor="rgba(107, 192, 250, 0.4)",
            mode="lines",
            name="ICU admissions [predicted]",
            showlegend=False
        ),
        row=3,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=yhat_mean.index,
            y=10**yhat_mean["incid_rea"],
            marker=dict(color="rgba(40, 157, 237, 1)"),
            line=dict(dash='dot'),
            mode="lines",
            name="ICU admissions [predicted]",
            showlegend=False
        ),
        row=3,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=df_dlog_all.index,
            y=10**df_dlog_all["incid_rea"],
            marker_color="black",
            mode="lines",
            name="ICU admissions",
            showlegend=False
        ),
        row=3,
        col=1
    )

    ###
    #Deaths


    fig.add_trace(
        go.Scatter(
            x=yhat_conf_int_75_3.index,
            y=10**yhat_conf_int_75_3["mean_ci_lower"],
            line_width=0,
            mode="lines",
            name="Deaths [predicted]",
            showlegend=False
        ),
        row=4,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=yhat_conf_int_75_3.index,
            y=10**yhat_conf_int_75_3["mean_ci_upper"],
            line_width=0,
            fill="tonexty",
            fillcolor="rgba(107, 192, 250, 0.8)",
            mode="lines",
            name="Deaths [predicted]",
            showlegend=False
        ),
        row=4,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=yhat_conf_int_3.index,
            y=10**yhat_conf_int_3["mean_ci_lower"],
            line_width=0,
            mode="lines",
            name="Deaths [predicted]",
            showlegend=False
        ),
        row=4,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=yhat_conf_int_3.index,
            y=10**yhat_conf_int_3["mean_ci_upper"],
            line_width=0,
            fill="tonexty",
            fillcolor="rgba(107, 192, 250, 0.4)",
            mode="lines",
            name="Deaths [predicted]",
            showlegend=False
        ),
        row=4,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=yhat_mean.index,
            y=10**yhat_mean["incid_dc"],
            marker=dict(color="rgba(40, 157, 237, 1)"),
            line=dict(dash='dot'),
            mode="lines",
            name="Deaths [predicted]",
            showlegend=False
        ),
        row=4,
        col=1
    )

    fig.add_trace(
        go.Scatter(
            x=df_dlog_all.index,
            y=10**df_dlog_all["incid_dc"],
            marker_color="black",
            mode="lines",
            name="Deaths",
            showlegend=False
        ),
        row=4,
        col=1
    )

    fig.update_xaxes(range=["2021-10-01", "2021-12-12"])

    fig.add_annotation(
        x=0.5,
        y=-0.13,
        xref="paper",
        yref="paper",
        text="Model VARMAX(p=14, q=0). Endog variables: dlog(new_cases), dlog(hosp_admissions), dlog(ICU_adm), dlog(deaths).<br>Exog variables : dlog(shot_1_cum), dlog(booster_shot_cum). All variable are smoothed (rolling 7 days mean).<br>Confidence interval 97% and 75%.",
        showarrow=False
    )

    fig.add_annotation(
        x=0.5,
        y=1.12,
        xref="paper",
        yref="paper",
        font=dict(size = 30),
        text="France Covid Forecast (VARX model)",
        showarrow=False
    )

    fig.add_annotation(
        x=0.5,
        y=1.08,
        xref="paper",
        yref="paper",
        font=dict(size = 15),
        text="Author : @GuillaumeRozier. Based on, and with the help of @paldama.",
        showarrow=False   
    )

    fig.update_layout(
        xaxis=dict(nticks=25),
        xaxis2=dict(nticks=25),
        xaxis3=dict(nticks=25),
        xaxis4=dict(nticks=25),

        yaxis=dict(
            side="right",
            nticks=10,
            titlefont=dict(
                color="#1f77b4"
            ),
            tickfont=dict(
                color="#1f77b4"
            )
        ),
        yaxis2=dict(
            side="right",
            nticks=10,
            titlefont=dict(
                color="#1f77b4"
            ),
            tickfont=dict(
                color="#1f77b4"
            )
        ),
        yaxis3=dict(
            side="right",
            nticks=10,
            titlefont=dict(
                color="#1f77b4"
            ),
            tickfont=dict(
                color="#1f77b4"
            )
        ),
        yaxis4=dict(
            side="right",
            nticks=10,
            titlefont=dict(
                color="#1f77b4"
            ),
            tickfont=dict(
                color="#1f77b4"
            )
        ),
        margin=dict(
            t = 150,
            b = 150
        )
    )


    fig.write_image("model_output.png", engine="kaleido", width=700, height=1100, scale=2)
    #fig.show()

plot_and_export()
